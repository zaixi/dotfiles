##!/bin/zsh -f
#zmodload zsh/zprof
#

# 安装和更新 {{{
### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

function _upgrade_plugin() {
  zinit self-update
  zinit update
  pip3 install thefuck --upgrade
  sudo pip3 install thefuck --upgrade
}

function check_for_upgrade() {
	Plugin_Cache_Dir="$HOME/.cache/zsh_plugin_update"
	if mkdir -p "$Plugin_Cache_Dir/update.lock" 2>/dev/null; then
		. ${Plugin_Cache_Dir}/.zsh-update 2>/dev/null
		zmodload zsh/datetime
		NOW_TIME=$(( $EPOCHSECONDS / 60 / 60 / 24 ))
		if [[ -z "$LAST_TIME" ]]; then
			echo "LAST_TIME=$NOW_TIME" >! ${Plugin_Cache_Dir}/.zsh-update
		else
			epoch_target=30
			epoch_diff=$(($NOW_TIME - $LAST_TIME))
			if [ $epoch_diff -gt $epoch_target ]; then
				echo "Plugin starts to install or upgrade...\n"
				_upgrade_plugin
				echo "LAST_TIME=$NOW_TIME" >! ${Plugin_Cache_Dir}/.zsh-update
			fi
		fi
	  rmdir $Plugin_Cache_Dir/update.lock
	fi
}
check_for_upgrade

#}}}

# 个人设置加载 {{{
# Load local bash/zsh compatible settings
_INIT_SH_NOFUN=1
[ -f "$HOME/.local/etc/init.sh" ] && source "$HOME/.local/etc/init.sh"

# exit for non-interactive shell
#[[ $- != *i* ]] && return

# WSL (aka Bash for Windows) doesn't work well with BG_NICE
[ -d "/mnt/c" ] && [[ "$(uname -a)" == *Microsoft* ]] && unsetopt BG_NICE

#}}}

# 插件所需设置 {{{

ZSH_AUTOSUGGEST_STRATEGY=(history completion)
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
ZSH_AUTOSUGGEST_USE_ASYNC=1
ZSH_AUTOSUGGEST_MANUAL_REBIND=1
ZSH_AUTOSUGGEST_COMPLETION_IGNORE='( |man |pikaur -S )*'
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=8

_ZL_CMD='j'
FZ_CMD='j'
FZ_HISTORY_CD_CMD=_zlua
_ZL_HYPHEN=1
_ZL_MATCH_MODE=1

PURE_GIT_TIMEOUT_MS=100
PROMPT=$'%F{071}%n%f@%F{071}%m%f:%F{blue}%~%f %(?.%F{green}.%F{red})❯%f'
zstyle ':prompt:pure:prompt:success' color cyan

skip_global_compinit=1
zle -N deer

# }}}

# 插件 {{{

dotfiles_dir=$(dirname $0)
ZPFX=$dotfiles_dir/zinit/polaris
typeset -A ZINIT=(
    SNIPPETS_DIR    $dotfiles_dir/zinit/snippets
    COMPINIT_OPTS   -C
    )

source "$HOME/.zinit/bin/zinit.zsh"
# 加载 OMZ 框架及部分插件
zinit snippet OMZP::last-working-dir
zinit snippet OMZL::termsupport.zsh
ZSH_THEME_TERM_TITLE_IDLE=""
#ZSH_THEME_TERM_TAB_TITLE_IDLE="%15<..<%~%<<"
zinit wait"0a" lucid for \
    OMZL::directories.zsh \
    OMZL::history.zsh \
    OMZL::theme-and-appearance.zsh \
    OMZL::git.zsh \
    OMZL::history.zsh \
    OMZL::key-bindings.zsh \
    OMZL::completion.zsh \
    OMZP::colorize \
    OMZP::sudo \
    OMZP::common-aliases \
    OMZP::colored-man-pages \
    OMZP::extract \
    OMZP::repo \
    OMZP::cp \
    OMZP::systemd \
    OMZP::pip \

zinit wait"1" lucid depth=1 as=program pick="$ZPFX/bin/(fzf|fzf-tmux)" \
  atclone="cp shell/completion.zsh _fzf_completion; \
  ./install --no-bash --no-zsh; \
    cp bin/(fzf|fzf-tmux) $ZPFX/bin" \
  src="shell/key-bindings.zsh" for \
      junegunn/fzf

zinit ice wait"0a" lucid atclone"dircolors -b dircolors.ansi-dark > clrs.zsh" \
    atpull'%atclone' pick"clrs.zsh" nocompile'!' \
    atload'zstyle ":completion:*" list-colors “${(s.:.)LS_COLORS}”'
zinit light seebi/dircolors-solarized

source $dotfiles_dir/zinit/p10.zsh
zinit ice depth=1
zinit light romkatv/powerlevel10k

zinit wait"0c" lucid for \
    wfxr/forgit \
    changyuheng/fz \
    skywind3000/z.lua \
    zsh-users/zsh-history-substring-search \
 atinit"ZINIT[COMPINIT_OPTS]=-C; zicompinit; zicdreplay" \
    zdharma/fast-syntax-highlighting \
 blockf \
    zsh-users/zsh-completions \
 atload"!_zsh_autosuggest_start" \
    zsh-users/zsh-autosuggestions \
    laggardkernel/zsh-thefuck

# }}}

# fzf {{{
export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'
export FZF_DEFAULT_OPTS="
--color fg:-1,bg:-1,hl:33,fg+:254,bg+:235,hl+:33
--color info:136,prompt:136,pointer:230,marker:230,spinner:136
"
export FZF_COMPLETION_TRIGGER=''

# fuzzy grep open via ag with line number
vg() {
  local file
  local line

  #read -r file line <<<"$(ag --nobreak --noheading $@ | fzf -0 -1 | awk -F: '{print $1, $2}')"
  read -r file line <<<"$(ag --nobreak --noheading --color $@ | fzf -0 -1 --ansi | awk -F: '{print $1, $2}')"

  if [[ -n $file ]]
  then
     vim $file +$line
  fi
}

j() {
	if [[ "$#" -ne 0 ]]; then
		z $@
		return
	fi
	cd "$(z -l | sed '/_____/Q; s/^[0-9,.:]*\s*//' |  fzf --height 40% --reverse --inline-info)"
}
# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fe() {
  local files
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# fda - including hidden directories
fda() {
  local dir
  dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}
#}}}

# 自动补全 {{{

# ignore complition
zstyle ':completion:*:complete:-command-:*:*' ignored-patterns '*.pdf|*.exe|*.dll'
zstyle ':completion:*:*sh:*:' tag-order files
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*'   force-list always
zstyle ':completion:*:*:*:default' menu yes select

# }}}

# 语法高亮: {{{
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)

typeset -A ZSH_HIGHLIGHT_STYLES

# ZSH_HIGHLIGHT_STYLES[command]=fg=white,bold
# ZSH_HIGHLIGHT_STYLES[alias]='fg=magenta,bold'
ZSH_HIGHLIGHT_STYLES[default]=none
ZSH_HIGHLIGHT_STYLES[unknown-token]=fg=009
ZSH_HIGHLIGHT_STYLES[reserved-word]=fg=009,standout
ZSH_HIGHLIGHT_STYLES[alias]=fg=cyan,bold
ZSH_HIGHLIGHT_STYLES[builtin]=fg=cyan,bold
ZSH_HIGHLIGHT_STYLES[function]=fg=cyan,bold
ZSH_HIGHLIGHT_STYLES[command]=fg=white,bold
ZSH_HIGHLIGHT_STYLES[precommand]=fg=white,underline
ZSH_HIGHLIGHT_STYLES[commandseparator]=none
ZSH_HIGHLIGHT_STYLES[hashed-command]=fg=009
ZSH_HIGHLIGHT_STYLES[path]=fg=214,underline
ZSH_HIGHLIGHT_STYLES[globbing]=fg=063
ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=white,underline
ZSH_HIGHLIGHT_STYLES[single-hyphen-option]=none
ZSH_HIGHLIGHT_STYLES[double-hyphen-option]=none
ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=none
ZSH_HIGHLIGHT_STYLES[single-quoted-argument]=fg=063
ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=fg=063
ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=009
ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=009
# }}}

# zsh选项 {{{

#以下字符视为单词的一部分
WORDCHARS='*?_-[]~=&;!#$%^(){}<>'
unsetopt correct_all

HISTSIZE=50000
HISTFILE=$HOME/.zsh_history
#setopt extended_history          # 在历史文件中记录命令的时间戳
#setopt hist_expire_dups_first    # 当历史文件就大小超过大小时，首先删除重复项
#setopt hist_ignore_dups          # 如果连续输入的命令相同，历史纪录中只保留一个
#setopt hist_ignore_space         # 忽略以空格开头的命令
#setopt hist_verify               # 历史扩展后不立即执行
setopt inc_append_history        # 立即写入历史文件,而不是退出时才写入
#setopt share_history             # 共享zsh历史
setopt hist_expand               # 扩展历史

setopt HIST_IGNORE_ALL_DUPS      # 删除重复命令
setopt HIST_FIND_NO_DUPS         # 不显示先前找到的行
setopt HIST_SAVE_NO_DUPS         # 不要在历史文件中写入重复的条目
setopt hist_reduce_blanks        # 录制录入之前删除多余的空白
# }}}

# 按键绑定{{{
# default keymap
bindkey -s '\ee' 'vim\n'
bindkey '\eh' backward-char
bindkey '\el' forward-char
bindkey '\ej' down-line-or-history
bindkey '\ek' up-line-or-history
# bindkey '\eu' undo
bindkey '\eH' backward-word
bindkey '\eL' forward-word
bindkey '\eJ' beginning-of-line
bindkey '\eK' end-of-line

bindkey -s '\eo' 'cd ..\n'
bindkey -s ';;' 'ls\n'

bindkey '\e[1;3D' backward-word
bindkey '\e[1;3C' forward-word
bindkey '\e[1;3A' beginning-of-line
bindkey '\e[1;3B' end-of-line

bindkey '\ev' deer
# }}}

# 别名 {{{
alias jz='j -c' # 严格匹配当前路径的子路径
alias ji='j -i' # 使用交互式选择模式
alias jf='j -I' # 使用 fzf 对多个结果进行选择
alias jb='j -b' # 快速回到父目录
alias pdf2htmlEX='sudo docker run -ti --rm -v `pwd`:/pdf bwits/pdf2htmlex pdf2htmlEX'
alias rm="trash"
alias f='find -name'
alias vi='vim'
alias minicom='minicom -w'
alias ncdu='baobab'
gdbtool () { emacs --eval "(gdb \"csky-abiv2-elf-gdb --annotate=3 -i=mi $*\")";}
# }}}

# 环境变量 {{{

export EDITOR=vim
export LESSCHARSET=utf-8
export FORCE_UNSAFE_CONFIGURE=1
unset NO_PROXY ALL_PROXY all_proxy no_proxy
export REPO_URL='https://mirrors.tuna.tsinghua.edu.cn/git/git-repo/'

# }}}

#zprof
